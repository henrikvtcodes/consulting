datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @map("refreshToken")
  access_token       String? @map("accessToken")
  expires_at         Int?    @map("expiresAt")
  token_type         String? @map("tokenType")
  scope              String?
  id_token           String? @map("idToken")
  session_state      String? @map("sessionState")
  oauth_token_secret String? @map("oauthTokenSecret")
  oauth_token        String? @map("oauthToken")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  phone         String?
  image         String?
  role          Role      @default(client)
  roleString    String?
  isInvited     Boolean   @default(false)
  addressLine1  String?
  addressLine2  String?
  addressCity   String?
  addressState  String?
  addressZip    String?

  accounts Account[]
  sessions Session[]
  customer Customer?
  invite   Invite?

  @@map("users")
}

enum Role {
  admin
  client
}

model Invite {
  id     String    @id @default(cuid())
  token  String    @unique
  used   Boolean   @default(false)
  usedBy String?   @unique
  usedOn DateTime?

  user User? @relation(fields: [usedBy], references: [id], onDelete: Cascade)

  @@unique([id, token])
  @@map("invites")
}

model Customer {
  id       String  @id @default(cuid())
  userId   String  @unique
  stripeID String? @unique

  user User @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  charges  Charge[]
  projects Project[]
  invoices Invoice[]
  quotes   Quote[]

  @@map("customers")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String
  status      ProjectStatus @default(awaitingApproval)
  isClosed    Boolean
  ownerId     String
  totalCost   Int
  totalDue    Int
  totalPaid   Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())

  customer Customer @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: Cascade)

  charges  Charge[]
  quotes   Quote[]
  invoices Invoice[]

  @@map("projects")
}

enum ProjectStatus {
  awaitingApproval
  approved
  inProgress
  awaitingPayment
  completed
  cancelled
}

model Quote {
  id         String   @id @default(cuid())
  file       String
  projectId  String
  customerId String
  amount     Int
  status     String
  isAccepted Boolean
  isDeclined Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  project  Project  @relation(fields: [projectId], references: [id], onDelete: NoAction)
  customer Customer @relation(fields: [customerId], references: [id], onDelete: NoAction)

  invoices Invoice?
  charges  Charge?

  @@map("quotes")
}

model Invoice {
  id         String   @id @default(cuid())
  projectId  String
  customerId String
  stripeId   String
  chargeId   String   @unique
  quoteId    String   @unique
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  project  Project  @relation(fields: [projectId], references: [id], onDelete: NoAction)
  customer Customer @relation(fields: [customerId], references: [id], onDelete: NoAction)
  charge   Charge   @relation(fields: [chargeId], references: [id], onDelete: Cascade)
  quote    Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model Charge {
  id         String   @id @default(cuid())
  amount     Int
  currency   String
  customerId String
  projectId  String
  stripeId   String
  paid       Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  quoteId    String?  @unique

  customer Customer @relation(fields: [customerId], references: [id], onDelete: NoAction)
  project  Project  @relation(fields: [projectId], references: [id], onDelete: NoAction)
  quote    Quote?   @relation(fields: [quoteId], references: [id], onDelete: Cascade)

  invoice Invoice?

  @@map("charges")
}
