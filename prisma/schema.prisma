datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @map("refreshToken")
  access_token       String? @map("accessToken")
  expires_at         Int?    @map("expiresAt")
  token_type         String? @map("tokenType")
  scope              String?
  id_token           String? @map("idToken")
  session_state      String? @map("sessionState")
  oauth_token_secret String? @map("oauthTokenSecret")
  oauth_token        String? @map("oauthToken")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  phone         String?
  image         String?
  role          String    @default("user")
  isInvited     Boolean   @default(false)

  account  Account[]
  sessions Session[]
  customer Customer[]
  invite   Invite[]

  @@map("users")
}

model Invite {
  id     String    @id @default(cuid())
  token  String    @unique
  used   Boolean   @default(false)
  usedBy String    @default("null")
  usedOn DateTime?

  user User @relation(fields: [usedBy], references: [id], onDelete: Cascade)

  @@unique([id, token])
  @@map("invites")
}

model Customer {
  id       String @id @default(cuid())
  userId   String
  fullName String
  stripeID String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  charge   Charge[]
  projects Project[]
  invoices Invoice[]

  Quote Quote[]
  @@map("customers")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String
  status      String
  isClosed    Boolean
  ownerId     String
  totalCost   Int
  totalDue    Int
  totalPaid   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  customer Customer @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  charge   Charge[]
  quote    Quote[]
  invoices Invoice[]

  @@map("projects")
}

model Quote {
  id         String   @id @default(cuid())
  file       String
  projectId  String
  customerId String
  amount     Int
  status     String
  isAccepted Boolean
  isDeclined Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  invoices Invoice[]
  charges  Charge[]

  @@map("quotes")
}

model Invoice {
  id         String   @id @default(cuid())
  projectId  String
  customerId String
  stripeId   String
  chargeId   String
  quoteId    String
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  charge   Charge   @relation(fields: [chargeId], references: [id], onDelete: Cascade)
  quote    Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model Charge {
  id         String   @id @default(cuid())
  amount     Int
  currency   String
  customerId String
  projectId  String
  stripeId   String
  paid       Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  quoteId    String?

  customer Customer @relation(fields: [customerId], references: [id], onDelete: NoAction)
  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  quote    Quote?   @relation(fields: [quoteId], references: [id])

  invoice Invoice[]

  @@map("charges")
}
